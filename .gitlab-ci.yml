image: alpine

services:
   - name: redis:latest

stages:
  - build
  - test_isolated
  - test
  - documentation
  - deploy

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_TEST_IMAGE_SHA: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  CONTAINER_SPAMD: $CONTAINER_REGISTRY_IMAGE:spamd
  CONTAINER_CLAMD: $CONTAINER_REGISTRY_IMAGE:clamd

unittests:
  image: $CONTAINER_TEST_IMAGE_SHA
  services:
    - $CONTAINER_REGISTRY_IMAGE:clamd
    - $CONTAINER_REGISTRY_IMAGE:spamd
  stage: test
  script:
    - cd fuglu
    - nosetests-3.6 --rednose tests/unit

isolated:
  image: $CONTAINER_TEST_IMAGE_SHA
  services:
    - $CONTAINER_REGISTRY_IMAGE:clamd
    - $CONTAINER_REGISTRY_IMAGE:spamd
  stage: test_isolated
  script:
    - cd fuglu
    - nosetests-3.6 --rednose tests/isolated  --with-isolation

integrationtests:
  image: $CONTAINER_TEST_IMAGE_SHA
  services:
    - $CONTAINER_REGISTRY_IMAGE:clamd
    - $CONTAINER_REGISTRY_IMAGE:spamd
  stage: test
  script:
    - cd fuglu
    - nosetests-3.6 --rednose tests/integration

pages:
  stage: documentation
  script:
    - mkdir public
    - apk --no-cache add python3 py3-pip python3-dev make
    - cd fuglu
    - python3 setup.py install
    - cd develop/doc
    - python3 make_sphinx_plugin_doc.py > ../../../documentation/source/includedplugins-autogen.txt
    - pip3 install sphinx
    - cd ../../../documentation
    - make html
    - mv _build/* ../public/
  artifacts:
    paths:
    - public
  only:
    - master
    - develop
    - milter


# deploy to local registry if the environment variable
# DEPLOY_ENV is set
docker_deploy:
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  stage: deploy

  script:
    - 'echo "DEPLOY_ENV: $DEPLOY_ENV"'
    - 'echo "CI_COMMIT_REF_SLUG: $CI_COMMIT_REF_SLUG"'
    - 'echo "CI_COMMIT_SHA: $CI_COMMIT_SHA"'
    - sh $PWD/.gitlab-ci-deploy.sh

docker_fuglu:
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  stage: build

  script:
    - 'echo "Building fuglu image"'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CONTAINER_TEST_IMAGE || docker pull $CONTAINER_RELEASE_IMAGE || true
    - docker build --cache-from $CONTAINER_TEST_IMAGE --cache-from $CONTAINER_RELEASE_IMAGE -t $CONTAINER_TEST_IMAGE_SHA -f docker/fuglu-testenv-contained/Dockerfile.alpine .
    - 'echo "Image info:"'
    - docker push $CONTAINER_TEST_IMAGE_SHA

docker_spamd:
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  stage: build

  script:
    - 'echo "Building spamd image"'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CONTAINER_SPAMD || true
    - docker build --cache-from $CONTAINER_SPAMD -t $CONTAINER_SPAMD -f docker/spamd/Dockerfile .
    - 'echo "Image info:"'
    - docker push $CONTAINER_SPAMD

docker_clamd:
  image: docker:19.03.1
  services:
    - docker:19.03.1-dind
  stage: build

  script:
    - 'echo "Building clamd image"'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CONTAINER_CLAMD || true
    - docker build --cache-from $CONTAINER_CLAMD -t $CONTAINER_CLAMD -f docker/clamd/Dockerfile .
    - 'echo "Image info:"'
    - docker push $CONTAINER_CLAMD
